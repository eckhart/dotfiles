if has("syntax")
  syntax on
endif

set background=dark

" Enable code folding, type za to open and close
set foldmethod=indent
set foldlevel=99

" Indent
set smartindent
set tabstop=2
set shiftwidth=2
set expandtab

set mouse=a		" Enable mouse usage (all modes)
set number
set backspace=2   " Makes backspace work like it should!
set incsearch
set pastetoggle=<F2>  " For pasting
set laststatus=2
set completeopt=menuone,longest,preview

" Clever shortcuts

let mapleader = "\<Space>"

vmap <Leader>y "+y
vmap <Leader>d "+d
nmap <Leader>p "+p
nmap <Leader>P "+P
vmap <Leader>p "+p
vmap <Leader>P "+P

nnoremap <Leader>w :w<CR>
nnoremap <Leader>q :q<CR>
nnoremap <Leader>Q :q!<CR>
nnoremap <Leader>a :qa<CR>
nnoremap <Leader>A :qa!<CR>
nnoremap <Leader>s :wq<CR>

nmap <silent> <Leader>c :sp<CR>
nmap <silent> <Leader>C :vs<CR>

" follow XDG directory specifications (darwin too for convenience)
let $MYVIMRC="$XDG_CONFIG_HOME/vim/vimrc"
set directory=$XDG_CACHE_HOME/vim
set viminfo+=n$XDG_CACHE_HOME/viminfo
set runtimepath=$XDG_CONFIG_HOME/vim,$XDG_CONFIG_HOME/vim/after,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$XDG_CONFIG_HOME/vim/bundle/vundle

" load vundle, options are required
set nocompatible
filetype off
call vundle#rc("$XDG_CONFIG_HOME/vim/bundle")

" let vundle manage itself
Bundle 'gmarik/vundle'

" bundle packages
Bundle 'https://github.com/scrooloose/nerdtree'
Bundle 'https://github.com/fholgado/minibufexpl.vim'
Bundle 'https://github.com/scrooloose/syntastic'
Bundle 'https://github.com/rodjek/vim-puppet'
Bundle 'https://github.com/vim-ruby/vim-ruby'
Bundle 'https://github.com/marcweber/vim-addon-mw-utils'
Bundle 'https://github.com/tomtom/tlib_vim'
Bundle 'https://github.com/Shougo/neocomplete.vim'
Bundle 'https://github.com/Shougo/neosnippet.vim'
Bundle 'https://github.com/Shougo/neosnippet-snippets'
Bundle 'https://github.com/adonis0147/prettyGuides'
Bundle 'https://github.com/taylor/vim-zoomwin'
Bundle 'https://github.com/christoomey/vim-tmux-navigator'
Bundle 'https://github.com/nanotech/jellybeans.vim'

filetype plugin indent on

autocmd ColorScheme * highlight Normal ctermbg=None
autocmd ColorScheme * highlight NonText ctermbg=None
colorscheme jellybeans

" prettier vertical split

hi VertSplit    ctermfg=0 ctermbg=None cterm=None
set fillchars+=vert:\│

map <leader>n :NERDTreeToggle<CR>

" map for syntastic errors window
nnoremap <LEADER>e :Errors<CR>

" autoclose syntastic's error windown when no errors
let g:syntastic_auto_loc_list=2

" syntastic checking mode
let g:syntastic_mode_map = { 'mode': 'active',                              
      \ 'active_filetypes': ['ruby', 'python', 'perl', 'shell', 'puppet' ],           
      \ 'passive_filetypes': ['php', 'html'] }

" check syntax on file open
let g:syntastic_check_on_open=1

" enable puppet module detection
let g:puppet_module_detect=1

" miniBufExpl
let g:miniBufExplMapWindowNavVim = 1 
let g:miniBufExplMapWindowNavArrows = 1 
let g:miniBufExplMapCTabSwitchBufs = 1 
let g:miniBufExplModSelTarget = 1 

map <leader><TAB> :bn<CR>
map <leader><S-TAB> :bp<CR>

" neocomplete 
let g:acp_enableAtStartup = 0
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#enable_camel_case = 1
let g:neocomplete#enable_underbar_case = 1
let g:neocomplete#enable_auto_delimiter = 1
let g:neocomplete#max_list = 15
let g:neocomplete#force_overwrite_completefunc = 1

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
  let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" <TAB>: completion.
inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<TAB>"

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
 let g:neocomplete#sources#omni#input_patterns = {}
endif
if !exists('g:neocomplete#force_omni_input_patterns')
 let g:neocomplete#force_omni_input_patterns = {}
endif

" neocomplete end

" neosnippet
" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif

" prettyguides
let g:PrettyGuidesChar = '│'

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif
