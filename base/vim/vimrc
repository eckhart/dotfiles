if has("syntax")
  syntax on
endif

set background=dark

" Enable code folding, type za to open and close
set foldmethod=indent
set foldlevel=99

" Indent
set smartindent
set tabstop=2
set shiftwidth=2
set expandtab

set mouse=a		" Enable mouse usage (all modes)
set number
set backspace=2   " Makes backspace work like it should!
set incsearch
set pastetoggle=<F2>  " For pasting
set laststatus=2
set completeopt=menuone,longest,preview

if has("unix")
  let s:uname = system("uname")
  if s:uname == "Linux\n" || "Darwin\n"

  " follow XDG directory specifications (darwin too for convenience)
  let $MYVIMRC="$XDG_CONFIG_HOME/vim/vimrc"
  set directory=$XDG_CACHE_HOME/vim
  set viminfo+=n$XDG_CACHE_HOME/viminfo
  set runtimepath=$XDG_CONFIG_HOME/vim,$XDG_CONFIG_HOME/vim/after,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$XDG_CONFIG_HOME/vim/bundle/vundle

  " load vundle, options are required
  set nocompatible
  filetype off
  call vundle#rc("$XDG_CONFIG_HOME/vim/bundle")

  " let vundle manage itself
  Bundle 'gmarik/vundle'

  " bundle packages
  Bundle 'https://github.com/scrooloose/nerdtree'
  Bundle 'https://github.com/fholgado/minibufexpl.vim'
  Bundle 'https://github.com/scrooloose/syntastic'
  Bundle 'https://github.com/rodjek/vim-puppet'
  Bundle 'https://github.com/vim-ruby/vim-ruby'
  Bundle 'https://github.com/scrooloose/nerdtree'
  Bundle 'https://github.com/marcweber/vim-addon-mw-utils'
  Bundle 'https://github.com/tomtom/tlib_vim'
  Bundle 'https://github.com/Shougo/neocomplete.vim'
  Bundle 'https://github.com/Shougo/neosnippet.vim'
  Bundle 'https://github.com/Shougo/neosnippet-snippets'

  filetype plugin indent on

  " fix colors for erosion urxvt colorscheme {

    " syntax highlighting groups
    hi Comment      ctermfg=12
    hi Constant     ctermfg=15 
    hi Identifier   ctermfg=4
    hi Statement    ctermfg=2
    hi PreProc      ctermfg=6
    hi Type         ctermfg=1
    hi Special      ctermfg=3
    hi Underlined   ctermfg=7
    hi Ignore       ctermfg=9
    hi Error        ctermbg=7 ctermfg=11
    hi Todo         ctermfg=1
    hi Normal ctermfg=none ctermbg=none
    hi NonText ctermfg=0 ctermbg=none
    hi Directory        ctermfg=12

    hi VertSplit        ctermfg=black
    hi StatusLine        ctermfg=green
    hi StatusLineNC        ctermfg=0 

    hi Folded ctermbg=0 ctermfg=8

    hi Pmenu ctermfg=10 ctermbg=0
    hi PmenuSel ctermfg=0 ctermbg=14
    hi LineNr ctermfg=8 ctermbg=none
    hi CursorLine ctermfg=none ctermbg=none cterm=none
    hi CursorLineNr ctermfg=none ctermbg=0 
    hi CursorColumn ctermfg=none ctermbg=0

   " Syntax checker colors
    highlight SignColumn ctermbg=none
    hi SyntasticErrorSign ctermfg=1 ctermbg=none
    hi SyntasticWarningSign ctermfg=3 ctermbg=none
    hi SyntasticStyleErrorSign ctermfg=1 ctermbg=none
    hi SyntasticStyleWarningSign ctermfg=3 ctermbg=none
    hi SyntasticErrorLine ctermfg=none ctermbg=none
    hi SyntasticWarningLine ctermfg=none ctermbg=none
    hi SyntasticStyleErrorLine ctermfg=none ctermbg=none
    hi SyntasticStyleWarningLine ctermfg=none ctermbg=none
    hi SpellBad ctermfg=0 ctermbg=3
    hi SpellCap ctermfg=0 ctermbg=1

  "}
    
    map <leader>n :NERDTreeToggle<CR>
    
    " map for syntastic errors window
    nnoremap <LEADER>e :Errors<CR>
    
    " autoclose syntastic's error windown when no errors
    let g:syntastic_auto_loc_list=2
    
    " syntastic checking mode
    let g:syntastic_mode_map = { 'mode': 'active',                              
          \ 'active_filetypes': ['ruby', 'python', 'perl', 'shell', 'puppet' ],           
          \ 'passive_filetypes': ['php', 'html'] }
    
    " check syntax on file open
    let g:syntastic_check_on_open=1
    
    " enable puppet module detection
    let g:puppet_module_detect=1
    
    " miniBufExpl
    let g:miniBufExplMapWindowNavVim = 1 
    let g:miniBufExplMapWindowNavArrows = 1 
    let g:miniBufExplMapCTabSwitchBufs = 0 
    let g:miniBufExplModSelTarget = 1 

    " Since I can't get C-Tab to work for switching buffer...
    map <LEADER>l :bn<CR>
    map <LEADER>h :bp<CR>
   
    " neocomplete 
    let g:acp_enableAtStartup = 0
    let g:neocomplete#enable_at_startup = 1
    let g:neocomplete#enable_smart_case = 1
    let g:neocomplete#enable_camel_case = 1
    let g:neocomplete#enable_underbar_case = 1
    let g:neocomplete#enable_auto_delimiter = 1
    let g:neocomplete#max_list = 15
    let g:neocomplete#force_overwrite_completefunc = 1

    " Define keyword.
    if !exists('g:neocomplete#keyword_patterns')
      let g:neocomplete#keyword_patterns = {}
    endif
    let g:neocomplete#keyword_patterns['default'] = '\h\w*'

    " <TAB>: completion.
    inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
    inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<TAB>"

    " Enable omni completion.
    autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
    autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
    autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
    autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
    autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete

    " Enable heavy omni completion.
    if !exists('g:neocomplete#sources#omni#input_patterns')
     let g:neocomplete#sources#omni#input_patterns = {}
    endif
    if !exists('g:neocomplete#force_omni_input_patterns')
     let g:neocomplete#force_omni_input_patterns = {}
    endif

    " neocomplete end
    
    " neosnippet
    " Plugin key-mappings.
    imap <C-k>     <Plug>(neosnippet_expand_or_jump)
    smap <C-k>     <Plug>(neosnippet_expand_or_jump)
    
    " For snippet_complete marker.
    if has('conceal')
      set conceallevel=2 concealcursor=i
    endif

  endif
endif 

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif
