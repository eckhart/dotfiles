" GENERAL
" -------

" follow XDG directory specifications (darwin too for convenience)
let $MYVIMRC="$XDG_CONFIG_HOME/vim/vimrc"
set directory=$XDG_CACHE_HOME/vim
set viminfo+=n$XDG_CACHE_HOME/viminfo
set runtimepath=$XDG_CONFIG_HOME/vim,$XDG_CONFIG_HOME/vim/after,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$XDG_CONFIG_HOME/vim/bundle/vundle

set nocompatible
let mapleader = "\<Space>"
set hidden  " abandon buffer when unloaded

" NAVIGATION
" ----------

set incsearch

" move up/down into wrapped lines
nnoremap j gj
nnoremap k gk

" use <leader>1..9 to change buffer
for i in [1,2,3,4,5,6,7,8,9]
  exec "map <leader>" . i . " :buffer " . i . "<cr>"
endfor

" EDITING
" -------

set autoindent
set smartindent
set softtabstop=2
set shiftwidth=2
set expandtab

set mouse=a           " enable mouse usage (all modes)
set backspace=2       " makes backspace work like it should!
set pastetoggle=<F2>  " for pasting
set laststatus=2      " always a statusline
set completeopt=menuone,longest,preview

" don't exit visual mode when shitfting
vnoremap < <gv2h
vnoremap > >gv2l

" remove trailing spaces before saving
autocmd BufWritePre * :%s/\s\+$//e

" shortcuts for cut/copy/paste to/from clipboard
vmap <Leader>y "+y
vmap <Leader>d "+d
nmap <Leader>p "+p
nmap <Leader>P "+P
vmap <Leader>p "+p
vmap <Leader>P "+P

" shorcuts for writing and quiting buffer
nnoremap <Leader>w :w<CR>
nnoremap <Leader>q :q<CR>
nnoremap <Leader>Q :q!<CR>
nnoremap <Leader>a :qa<CR>
nnoremap <Leader>A :qa!<CR>
nnoremap <Leader>s :wq<CR>

" vertical/horizontal split with <leader>cC
nmap <silent> <Leader>c :sp<CR>
nmap <silent> <Leader>C :vs<CR>

" set list mode with <leader>l
nnoremap <Leader>l :set list!<CR>

" SPECIAL CASES
" -------------

" C
autocmd FileType c set tabstop=4|set softtabstop=4|set shiftwidth=4|set noexpandtab
autocmd BufRead,BufNewFile *.h,*.c set filetype=c

" UI
" --

set number
set numberwidth=4
set ruler
set showmatch   " when a bracket is inserted, briefly jump to the matching one.
set linebreak   " will wrap long lines at a character in 'breakat'

" hightlight cursorline with <leader>,
nnoremap <Leader>, :set cursorline!<CR>
" hightlight cursorcolumn with <leader>.
nnoremap <Leader>. :set cursorcolumn!<CR>

if has("syntax")
  syntax on
endif

" look and colors
" ---------------

set background=dark

hi Comment      ctermfg=8
hi StatusLine ctermfg=none ctermbg=0 cterm=none
hi StatusLineNC ctermfg=none ctermbg=0 cterm=none
hi Visual term=reverse cterm=reverse ctermbg=0

hi ErrorMsg ctermfg=none ctermbg=0

hi Folded ctermbg=0 ctermfg=8

hi Pmenu ctermfg=8 ctermbg=0
hi PmenuSel ctermfg=0 ctermbg=15
hi LineNr ctermfg=0 ctermbg=none
hi CursorLine ctermfg=none ctermbg=none cterm=none
hi CursorLineNr ctermfg=none ctermbg=0
hi CursorColumn ctermfg=none ctermbg=0

" syntax checker colors
hi SignColumn ctermbg=none
hi SyntasticErrorSign ctermfg=1 ctermbg=none
hi SyntasticWarningSign ctermfg=3 ctermbg=none
hi SyntasticStyleErrorSign ctermfg=1 ctermbg=none
hi SyntasticStyleWarningSign ctermfg=3 ctermbg=none
hi SyntasticErrorLine ctermfg=none ctermbg=none
hi SyntasticWarningLine ctermfg=none ctermbg=none
hi SyntasticStyleErrorLine ctermfg=none ctermbg=none
hi SyntasticStyleWarningLine ctermfg=none ctermbg=none
hi SpellBad ctermfg=0 ctermbg=3
hi SpellCap ctermfg=0 ctermbg=1

" prettier vertical split
hi VertSplit    ctermfg=0 ctermbg=None cterm=None
set fillchars+=vert:\│

" VUNDLE
" ------

filetype off
call vundle#rc("$XDG_CONFIG_HOME/vim/bundle")

" let vundle manage itself
Bundle 'gmarik/vundle'

" bundle packages
Bundle 'https://github.com/Shougo/neocomplete.vim'
Bundle 'https://github.com/Shougo/neosnippet-snippets'
Bundle 'https://github.com/Shougo/neosnippet.vim'
Bundle 'https://github.com/adonis0147/prettyGuides'
Bundle 'https://github.com/christoomey/vim-tmux-navigator'
Bundle 'https://github.com/fholgado/minibufexpl.vim'
Bundle 'https://github.com/honza/vim-snippets'
Bundle 'https://github.com/majutsushi/tagbar'
Bundle 'https://github.com/marcweber/vim-addon-mw-utils'
Bundle 'https://github.com/rodjek/vim-puppet'
Bundle 'https://github.com/scrooloose/nerdtree'
Bundle 'https://github.com/scrooloose/syntastic'
Bundle 'https://github.com/terryma/vim-multiple-cursors'
Bundle 'https://github.com/tomtom/tlib_vim'
Bundle 'https://github.com/vim-ruby/vim-ruby'

filetype plugin indent on

" BUNDLES SPECIFIC CONFIG
" -----------------------

" SHORTCUTS
" ---------

nmap <Leader>t :TagbarToggle<CR>
map <leader>n :NERDTreeToggle<CR>
nnoremap <leader>e :Errors<CR>

" SYNTASTIC
" ---------

" autoclose syntastic's error windown when no errors
let g:syntastic_auto_loc_list=2

" syntastic checking mode
let g:syntastic_mode_map = { 'mode': 'active',
      \ 'active_filetypes': ['ruby', 'python', 'perl', 'shell', 'puppet' ],
      \ 'passive_filetypes': ['php', 'html'] }

" check syntax on file open
let g:syntastic_check_on_open=1

" enable puppet module detection
let g:puppet_module_detect=1

" MINIBUFEXPL
" -----------

let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplMapWindowNavArrows = 1
let g:miniBufExplMapCTabSwitchBufs = 1
let g:miniBufExplModSelTarget = 1

" NEOCOMPLETE
" -----------

let g:acp_enableAtStartup = 0
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#enable_camel_case = 1
let g:neocomplete#enable_underbar_case = 1
let g:neocomplete#enable_auto_delimiter = 1
let g:neocomplete#max_list = 15
let g:neocomplete#force_overwrite_completefunc = 1

" define keyword.
if !exists('g:neocomplete#keyword_patterns')
  let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" <TAB>: completion.
inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<TAB>"

" enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete

" enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
 let g:neocomplete#sources#omni#input_patterns = {}
endif
if !exists('g:neocomplete#force_omni_input_patterns')
 let g:neocomplete#force_omni_input_patterns = {}
endif

" NEOSNIPPET
" ----------

" plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)

let g:neosnippet#enable_snipmate_compatibility = 1

" for snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif

" SNIPPETS SETTINGS
" ----------------

let g:snips_author = 'Anders Vaage'
let g:snips_email = 'anders@unix.uib.no'

" PRETTYGUIDES
" ------------

let g:PrettyGuidesChar = '│'

" source a global configuration file if available
" if filereadable("/etc/vim/vimrc.local")
"   source /etc/vim/vimrc.local
" endif
